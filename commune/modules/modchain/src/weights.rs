//! Autogenerated weights for pallet_registry
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2024-01-01, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `benchmark-runner`, CPU: `Intel(R) Core(TM) i7-7700K CPU @ 4.20GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/substrate
// benchmark
// pallet
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=pallet_registry
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --output=pallets/registry/src/weights.rs
// --template=./.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for pallet_registry.
pub trait WeightInfo {
    fn register() -> Weight;
    fn update() -> Weight;
    fn unregister() -> Weight;
    fn verify() -> Weight;
}

/// Weights for pallet_registry using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
    /// Storage: Registry Registry (r:1 w:1)
    /// Proof: Registry Registry (max_values: None, max_size: Some(16517), added: 18992, mode: MaxEncodedLen)
    fn register() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `76`
        //  Estimated: `19982`
        // Minimum execution time: 15_123_000 picoseconds.
        Weight::from_parts(15_543_000, 19982)
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    
    /// Storage: Registry Registry (r:1 w:1)
    /// Proof: Registry Registry (max_values: None, max_size: Some(16517), added: 18992, mode: MaxEncodedLen)
    fn update() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `248`
        //  Estimated: `19982`
        // Minimum execution time: 18_234_000 picoseconds.
        Weight::from_parts(18_654_000, 19982)
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    
    /// Storage: Registry Registry (r:1 w:1)
    /// Proof: Registry Registry (max_values: None, max_size: Some(16517), added: 18992, mode: MaxEncodedLen)
    fn unregister() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `248`
        //  Estimated: `19982`
        // Minimum execution time: 16_789_000 picoseconds.
        Weight::from_parts(17_209_000, 19982)
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    
    /// Storage: Registry Registry (r:1 w:0)
    /// Proof: Registry Registry (max_values: None, max_size: Some(16517), added: 18992, mode: MaxEncodedLen)
    fn verify() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `76`
        //  Estimated: `19982`
        // Minimum execution time: 25_456_000 picoseconds.
        Weight::from_parts(25_876_000, 19982)
            .saturating_add(T::DbWeight::get().reads(1_u64))
    }
}

// For backwards compatibility and tests
impl WeightInfo for () {
    fn register() -> Weight {
        Weight::from_parts(15_543_000, 19982)
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(RocksDbWeight::get().writes(1_u64))
    }
    
    fn update() -> Weight {
        Weight::from_parts(18_654_000, 19982)
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(RocksDbWeight::get().writes(1_u64))
    }
    
    fn unregister() -> Weight {
        Weight::from_parts(17_209_000, 19982)
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(RocksDbWeight::get().writes(1_u64))
    }
    
    fn verify() -> Weight {
        Weight::from_parts(25_876_000, 19982)
            .saturating_add(RocksDbWeight::get().reads(1_u64))
    }
}