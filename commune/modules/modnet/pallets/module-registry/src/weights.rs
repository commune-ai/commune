//! Autogenerated weights for `pallet_module_registry`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2024-01-01, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `substrate-node`, CPU: `Intel(R) Core(TM) i7-8700K CPU @ 3.70GHz`
//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("dev")`, DB CACHE: 1024

// Executed Command:
// ./target/production/substrate-node
// benchmark
// pallet
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=pallet_module_registry
// --extrinsic=*
// --wasm-execution=compiled
// --heap-pages=4096
// --output=./pallets/module-registry/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for `pallet_module_registry`.
pub trait WeightInfo {
	fn register_module() -> Weight;
	fn update_module() -> Weight;
	fn remove_module() -> Weight;
}

/// Weights for `pallet_module_registry` using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: `ModuleRegistry::Modules` (r:1 w:1)
	/// Proof: `ModuleRegistry::Modules` (`max_values`: None, `max_size`: Some(256), added: 2731, mode: `MaxEncodedLen`)
	fn register_module() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `76`
		//  Estimated: `3721`
		// Minimum execution time: 15_000_000 picoseconds.
		Weight::from_parts(16_000_000, 3721)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}

	/// Storage: `ModuleRegistry::Modules` (r:1 w:1)
	/// Proof: `ModuleRegistry::Modules` (`max_values`: None, `max_size`: Some(256), added: 2731, mode: `MaxEncodedLen`)
	fn update_module() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `178`
		//  Estimated: `3721`
		// Minimum execution time: 14_000_000 picoseconds.
		Weight::from_parts(15_000_000, 3721)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}

	/// Storage: `ModuleRegistry::Modules` (r:1 w:1)
	/// Proof: `ModuleRegistry::Modules` (`max_values`: None, `max_size`: Some(256), added: 2731, mode: `MaxEncodedLen`)
	fn remove_module() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `178`
		//  Estimated: `3721`
		// Minimum execution time: 13_000_000 picoseconds.
		Weight::from_parts(14_000_000, 3721)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
}

// For backwards compatibility and tests.
impl WeightInfo for () {
	/// Storage: `ModuleRegistry::Modules` (r:1 w:1)
	/// Proof: `ModuleRegistry::Modules` (`max_values`: None, `max_size`: Some(256), added: 2731, mode: `MaxEncodedLen`)
	fn register_module() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `76`
		//  Estimated: `3721`
		// Minimum execution time: 15_000_000 picoseconds.
		Weight::from_parts(16_000_000, 3721)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}

	/// Storage: `ModuleRegistry::Modules` (r:1 w:1)
	/// Proof: `ModuleRegistry::Modules` (`max_values`: None, `max_size`: Some(256), added: 2731, mode: `MaxEncodedLen`)
	fn update_module() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `178`
		//  Estimated: `3721`
		// Minimum execution time: 14_000_000 picoseconds.
		Weight::from_parts(15_000_000, 3721)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}

	/// Storage: `ModuleRegistry::Modules` (r:1 w:1)
	/// Proof: `ModuleRegistry::Modules` (`max_values`: None, `max_size`: Some(256), added: 2731, mode: `MaxEncodedLen`)
	fn remove_module() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `178`
		//  Estimated: `3721`
		// Minimum execution time: 13_000_000 picoseconds.
		Weight::from_parts(14_000_000, 3721)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
}
